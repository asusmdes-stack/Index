import os
from datetime import datetime
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters, CallbackQueryHandler

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")
LOG_CHAT_ID = int(os.environ.get("LOG_CHAT_ID", "0"))
OWNER_ID = int(os.environ.get("OWNER_ID", "0"))

if not BOT_TOKEN:
    raise SystemExit("‚ùå Error: BOT_TOKEN environment variable is required.")

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    now = datetime.utcnow().strftime("%Y-m-d %H:%M:%S UTC")

    if update.message:
        # ‚úÖ –ö–ù–û–ü–ö–ê –û–ü–õ–ê–¢–´ Stars
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å 10 Stars", callback_data="pay_10")]
        ])
        
        await update.message.reply_text(
            "ü§ñ Dualis Robot greets you!\n"
            "It invites you to learn more about its services in the app.\n\n"
            "üí∞ –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –∑–∞ 10 Stars:",
            reply_markup=keyboard
        )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞
    if user.id != OWNER_ID and LOG_CHAT_ID:
        text = (
            f"üì• –ù–æ–≤—ã–π –≤—Ö–æ–¥:\n"
            f"üÜî ID: {user.id}\n"
            f"üë§ –ò–º—è: {user.first_name or '‚Äî'}\n"
            f"üí¨ Username: @{user.username or '‚Äî'}\n"
            f"üïí –í—Ä–µ–º—è: {now}"
        )
        await context.bot.send_message(chat_id=LOG_CHAT_ID, text=text)

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üçÄ")

# ‚úÖ –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "pay_10":
        prices = [LabeledPrice("–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø", 10)]
        
        await context.bot.send_invoice(
            chat_id=query.from_user.id,
            title="‚≠ê –ü—Ä–µ–º–∏—É–º –≤ Dualis",
            description="–î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º Mini App",
            payload=f"premium|{query.from_user.id}|dualis_mini_app",
            provider_token="",  # –ü—É—Å—Ç–æ –¥–ª—è Stars
            currency="XTR",
            prices=prices
        )

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
async def pre_checkout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

# ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    payload = payment.invoice_payload
    
    if payload.startswith('premium|'):
        _, user_id_str, source = payload.split('|', 2)
        user_id = int(user_id_str)
        
        text = (
            f"‚úÖ ‚≠ê –û–ü–õ–ê–¢–ê –ò–ó MINI APP!\n\n"
            f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üí∞ –°—É–º–º–∞: {payment.total_amount} Stars\n"
            f"üì± –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
            f"üÜî Charge: {payment.telegram_payment_charge_id}"
        )
        
        await context.bot.send_message(chat_id=LOG_CHAT_ID, text=text)
        
        await update.message.reply_text(
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ {payment.total_amount} Stars!\n"
            "–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ‚≠ê"
        )

# === –ó–∞–ø—É—Å–∫ POLLING ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # ‚úÖ –í–°–ï –•–ï–ù–î–õ–ï–†–´
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^pay_"))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    
    print("üöÄ POLLING + Stars –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: main(), –Ω–µ main
