import os
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import LabeledPrice
from fastapi import FastAPI, Request

BOT_TOKEN = os.getenv("BOT_TOKEN")
FRONTEND_URL = os.getenv("FRONTEND_URL", "https://telega-nine.vercel.app")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@dp.message(commands=["start"])
async def start_command(message: types.Message):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    webapp_button = types.KeyboardButton(
        text="üí´ –û—Ç–∫—Ä—ã—Ç—å Mini App",
        web_app=types.WebAppInfo(url=FRONTEND_URL)
    )
    keyboard.add(webapp_button)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥–∏ 5 ‚≠ê\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App:",
        reply_markup=keyboard
    )


async def send_stars_invoice(chat_id: int, payload: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ Telegram Stars"""
    title = "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ ‚Äî 5 ‚≠ê"
    description = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞!"
    currency = "XTR"
    amount_stars = int(payload.get("amount_stars", 5))
    prices = [LabeledPrice(label="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏", amount=amount_stars)]

    invoice_payload = json.dumps({
        "uid": chat_id,
        "ts": payload.get("timestamp"),
        "type": "telegram_stars"
    })

    await bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=description,
        payload=invoice_payload,
        provider_token="",  # –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è XTR
        currency=currency,
        prices=prices
    )


@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
    if message.web_app_data:
        try:
            data = json.loads(message.web_app_data.data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ JSON: {e}")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        if data.get("action") == "request_payment":
            await message.answer("–°–æ–∑–¥–∞—é –∏–Ω–≤–æ–π—Å –Ω–∞ –æ–ø–ª–∞—Ç—É 5 ‚≠ê ...")
            await send_stars_invoice(message.chat.id, data)
            return

    if message.text and message.text.startswith("/start"):
        await start_command(message)


@dp.pre_checkout_query()
async def pre_checkout(pre_checkout: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)


@dp.message(content_types=[types.ContentType.SUCCESSFUL_PAYMENT])
async def successful_payment(message: types.Message):
    payment = message.successful_payment
    logger.info(f"‚úÖ Payment success: {payment.to_python()}")
    await message.answer("‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω, —Å–ø–∞—Å–∏–±–æ!")


@app.post("/api/webhook/{token}")
async def webhook(request: Request, token: str):
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è Telegram webhook"""
    if token != BOT_TOKEN:
        return {"ok": False, "error": "Unauthorized"}

    update = types.Update(**await request.json())
    await dp.process_update(update)
    return {"ok": True}


@app.get("/")
async def index():
    return {"ok": True, "info": "Telegram Stars Bot is running."}
